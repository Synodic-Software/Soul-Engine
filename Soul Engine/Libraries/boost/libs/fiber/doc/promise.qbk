[/
          Copyright Oliver Kowalke 2013.
 Distributed under the Boost Software License, Version 1.0.
    (See accompanying file LICENSE_1_0.txt or copy at
          http://www.boost.org/LICENSE_1_0.txt
]

[#class_promise]
[section:promise Template `promise<>`]

A __promise__ provides a mechanism to store a value (or exception) that can
later be retrieved from the corresponding __future__ object. `promise<>` and
`future<>` communicate via their underlying [link shared_state shared state].

        template< typename R >
        class promise {
        public:
            promise();

            template< typename Allocator >
            promise( std::allocator_arg_t, Allocator alloc);

            promise( promise && other) noexcept;

            promise( promise const& other) = delete;

            ~promise();

            promise & operator=( promise && other) noexcept;

            promise & operator=( promise const& other) = delete;

            void swap( promise & other) noexcept;

            future< R > get_future();

            void set_value( R const& value);

            void set_value( R && value);

            void set_exception( std::exception_ptr p);
        };

[heading Default constructor]

        promise();

[variablelist
[[Effects:] [Creates a promise with an empty [link shared_state shared state].]]
[[Throws:] [Nothing.]]
]

[heading Constructor]

        template< typename Allocator >
        promise( std::allocator_arg_t, Allocator alloc);

[variablelist
[[Effects:] [Creates a promise with an empty [link shared_state shared state] by using `alloc`.]]
[[Throws:] [Nothing.]]
[[See also:] [__allocator_arg_t__]]
]

[heading Move constructor]

        promise( promise && other) noexcept;

[variablelist
[[Effects:] [Creates a promise by moving the [link shared_state shared state] from `other`.]]
[[Postcondition:] [`other` contains no valid shared state.]]
[[Throws:] [Nothing.]]
]

[heading Destructor]

        ~promise();

[variablelist
[[Effects:] [Destroys `*this` and abandons the [link shared_state shared state] if shared state is
ready; otherwise stores __future_error__ with error condition __broken_promise__.]]
[[Throws:] [Nothing.]]
]

[operator_heading promise..operator_assign..operator=]

        promise & operator=( promise && other) noexcept;

[variablelist
[[Effects:] [Transfers the ownership of [link shared_state shared state] to `*this`.]]
[[Postcondition:] [`other` contains no valid shared state.]]
[[Throws:] [Nothing.]]
]

[member_heading promise..swap]

        void swap( promise & other) noexcept;

[variablelist
[[Effects:] [Swaps the [link shared_state shared state] between other and `*this`.]]
[[Throws:] [Nothing.]]
]

[member_heading promise..get_future]

        future< R > get_future();

[variablelist
[[Returns:] [A __future__ with the same [link shared_state shared state].]]
[[Throws:] [__future_error__ with __already_retrieved__ or __no_state__.]]
]

[member_heading promise..set_value]

        void set_value( R const& value);
        void set_value( R && value);

[variablelist
[[Effects:] [Store the result in the [link shared_state shared state] and marks the state as ready.]]
[[Throws:] [__future_error__ with __already_satisfied__ or __no_state__.]]
]

[member_heading promise..set_exception]

        void set_exception( std::exception_ptr);

[variablelist
[[Effects:] [Store an exception pointer in the [link shared_state shared state] and marks the state as ready.]]
[[Throws:] [__future_error__ with __already_satisfied__ or __no_state__.]]
]

[endsect]
