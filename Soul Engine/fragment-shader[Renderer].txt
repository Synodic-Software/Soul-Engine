 #version 430

	layout( std430, binding=0 ) buffer texB 
	{
		vec4 tex[];
	};

	layout(origin_upper_left,pixel_center_integer) in vec4 gl_FragCoord;

	//in vec2 texCoord_FS_in;
    out vec4 fragment;

	uniform uvec2 screenMod;
	uniform uvec2 screen;


vec4 bilinear( vec2 texcoord){

uint px = uint(floor(texcoord.x)); // floor of x
uint py = uint(floor(texcoord.y)); // floor of y

uint pyN;
uint pxN;

// load the four neighboring pixels

if(py+1>=screenMod.y){
pyN=py;
}
else{
pyN=py+1;
}

if(px+1>=screenMod.x){
pxN=px;
}
else{
pxN=px+1;
}

vec4 p1 = tex[py*screenMod.x+px];
vec4 p2 = tex[py*screenMod.x+pxN];
vec4 p3 = tex[pyN*screenMod.x+px];
vec4 p4 = tex[pyN*screenMod.x+pxN];

// Calculate the weights for each pixel
float fx = texcoord.x - px;
float fy = texcoord.y - py;
float fx1 = 1.0f - fx;
float fy1 = 1.0f - fy;

float w1 = fx1 * fy1;
float w2 = fx  * fy1;
float w3 = fx1 * fy ;
float w4 = fx  * fy ;

// Calculate the weighted sum of pixels (for each color channel)
float outr = p1.r * w1 + p2.r * w2 + p3.r * w3 + p4.r * w4;
float outg = p1.g * w1 + p2.g * w2 + p3.g * w3 + p4.g * w4;
float outb = p1.b * w1 + p2.b * w2 + p3.b * w3 + p4.b * w4;
float outa = p1.a * w1 + p2.a * w2 + p3.a * w3 + p4.a * w4;

return vec4(outr,outg,outb,outa);
}






    void main(){

		vec2 pos= gl_FragCoord.xy*(vec2(screenMod)/vec2(screen));


		fragment=bilinear(pos);

	}