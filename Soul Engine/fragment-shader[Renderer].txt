 #version 430

	layout( std430, binding=0 ) buffer texB 
	{
		vec4 tex[];
	};

	layout(pixel_center_integer) in vec4 gl_FragCoord;

    out vec4 fragment;

	uniform uvec2 screenMod;
	uniform uvec2 screen;


vec4 bilinear( vec2 texcoord){

uint px = uint(floor(texcoord.x)); // floor of x
uint py = uint(floor(texcoord.y)); // floor of y

uint pyN=py+1;
uint pxN=px+1;


vec4 p1 = tex[py*screenMod.x+px];
vec4 p2 = tex[py*screenMod.x+pxN];
vec4 p3 = tex[pyN*screenMod.x+px];
vec4 p4 = tex[pyN*screenMod.x+pxN];

// Calculate the weights for each pixel
 vec4 r1 = mix(p1, p2, fract(texcoord.x));
 vec4 r2 = mix(p3, p4, fract(texcoord.x));
 
 return mix (r1, r2, fract(texcoord.y));
}






    void main(){

		vec2 pos= gl_FragCoord.xy*(vec2(screenMod-vec2(1))/vec2(screen));

		fragment=bilinear(pos);

	}